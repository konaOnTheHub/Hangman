#lang racket/gui

(define dictionary (list
                    "lean"
                    "anxious"
                    "upset"
                    "gratis"
                    "same"
                    "pale"
                    "foamy"
                    "decisive"
                    "juicy"
                    "laughable"
                    "political"
                    "shaggy"
                    "adamant"
                    "periodic"
                    "recondite"
                    "cultured"
                    "calm"
                    "civil"
                    "whimsical"
                    "capricious"
                    "lowly"
                    "psychological"
                    "unruly"
                    "wide-eyed"
                    "damaged"
                    "repulsive"
                    "hateful"
                    "severe"
                    "breakable"
                    "abstracted"
                    "tight"
                    "fallacious"
                    "vast"
                    "rural"
                    "statuesque"
                    "lamentable"
                    "healthy"
                    "unadvised"
                    "amazing"
                    "obedient"
                    "naughty"
                    "mature"
                    "ruddy"
                    "mean"
                    "parsimonious"
                    "awake"
                    "basic"
                    "female"
                    "moldy"))
(define word (list-ref dictionary (random (length dictionary))))
(define lettersGuessed (list))
(define lettersFailed (list))
(define attempts 0)


(define letterDisplay (λ (lettersGuessed word)
                        (for/list ([x (in-range 0 (string-length word) 1)])
                          (cond
                            ((list? (member (string-ref word x) lettersGuessed)) (string-ref word x))
                            (else #\-)))))


(define fLetterDisplay (lambda (lettersFailed)
                         (for/list ([y lettersFailed])
                           (string y))))


(define game (λ (guess word)
               (cond
                 ((equal? guess word)
                  (send letterMsg set-label word)
                  (send wDialog show #t))
                 ((> (string-length guess) 1)
                  (send error show #t))
                 ((string-contains? word guess) (set! lettersGuessed (cons (string-ref guess 0) lettersGuessed))
                                                (send letterMsg set-label (list->string (letterDisplay lettersGuessed word)))
                                                (cond
                                                  ((not (string-contains? (list->string (letterDisplay lettersGuessed word)) "-"))
                                                   (send wDialog show #t))))
                 ((false? (string-contains? word guess)) (cond
                                                           ((string-contains? (list->string lettersFailed) guess) (send dupeLetter show #t))
                                                           (#t (set! lettersFailed (cons (string-ref guess 0) lettersFailed))
                                                               (set! attempts (+ 1 attempts))
                                                               (send scoreMsg set-label (number->string attempts))
                                                               (send fLetterMsg set-label (string-append "Wrong letters: " (string-join (fLetterDisplay lettersFailed) ", ")))
                                                               (cond
                                                                   ((equal? attempts 7)
                                                                   (send lDialog show #t)))))))))





(define frame (new frame%
                   [width 500]
                   [height 500]
                   [label "Hangman Game"]))

(define scoreMsg (new message%
                      [label (number->string attempts)]
                      [parent frame]))
(define letterMsg (new message%
                       [label (list->string (letterDisplay lettersGuessed word))]
                       [parent frame]
                       [auto-resize #t]))
(define fLetterMsg (new message%
                        [label "Wrong letters: "]
                        [parent frame]
                        [auto-resize #t]))

(define inputField (new text-field%
                        [label "Place your guess"]
                        [parent frame]))
(define submitButton (new button%
                          [label "Submit"]
                          [callback (lambda (x y)
                                      (game (string-downcase (send inputField get-value)) word))]
                          [parent frame]))

(define wDialog (new dialog%
                     [label "Win"]
                     [parent frame]))

(define wDialogMsg (new message%
                        [label "You get to live another day :)"]
                        [parent wDialog]))

(define lDialog (new dialog%
                     [label "Loss"]
                     [parent frame]))
(define lDialogMsg (new message%
                        [label "You died"]
                        [parent lDialog]))
(define lDialogMsgWord (new message%
                            [label (string-append "The word was: " word)]
                            [parent lDialog]))

(define dupeLetter (new dialog%
                        [label "Duplicate Letter"]
                        [parent frame]))
(define dupeLetterMsg (new message%
                           [label "Duplicate letter! Please choose another"]
                           [parent dupeLetter]))

(define error (new dialog%
                   [label ""]
                   
                   [parent frame]))
(define errorMsg (new message%
                      [label "Error"]
                      [parent error]))



(define panel (new horizontal-panel%
                   [style (list 'border)]
                   [parent frame]))

(send frame show #t)



